# Node.js Express TypeScript Setup Guide

## 📦 Project Initialization

### 1. Initialize Node.js Project
```bash
npm init -y
```
**Purpose**: Creates a `package.json` file with default settings
- `-y` flag accepts all default options automatically
- Generates basic project metadata

### 2. Install Core Dependencies
```bash
npm i express
```
**Purpose**: Installs Express.js framework for building web applications and APIs

## 🔧 TypeScript Development Setup

### 3. Install TypeScript Development Dependencies
```bash
npm i -D typescript ts-node @types/node @types/express
```
**Breakdown**:
- `typescript`: TypeScript compiler
- `ts-node`: Run TypeScript files directly without compilation
- `@types/node`: Type definitions for Node.js
- `@types/express`: Type definitions for Express.js
- `-D` flag: Installs as development dependencies

### 4. Initialize TypeScript Configuration
```bash
npx tsc --init
```
**Purpose**: Creates `tsconfig.json` file with TypeScript compiler options
- Configures compilation settings
- Sets up module resolution
- Defines target JavaScript version

### 5. Install Development Tools
```bash
npm i -D nodemon
```
**Purpose**: Automatically restarts server when file changes are detected
- Essential for development workflow
- Watches for file changes and reloads application

## 🗄️ Database Integration

### 6. MongoDB Connection
```bash
npm i mongoose
```
**Purpose**: MongoDB object modeling library for Node.js
- Provides schema-based solution
- Built-in type casting and validation
- Query building and middleware support

#### MongoDB Connection Details
```
Password: IpK8dEDROwt4Aaar
Connection String: mongodb+srv://rashmika:IpK8dEDROwt4Aaar@mini-pos.zayc5ao.mongodb.net/
```
**Note**: Store these credentials securely in environment variables

## ⚙️ Environment Configuration

### 7. Environment Variables Management
```bash
npm i dotenv
```
**Purpose**: Loads environment variables from `.env` file
- Keeps sensitive data separate from code
- Different configurations for different environments
- Security best practice

**Usage Example**:
```typescript
import dotenv from 'dotenv';
dotenv.config();

const mongoUri = process.env.MONGODB_URI;
const port = process.env.PORT || 3000;
```

## 🔐 Security & Authentication

### 8. Password Hashing
```bash
npm i bcrypt
npm i --save-dev @types/bcrypt
```
**Purpose**: Hash passwords before storing in database
- Uses salt rounds for additional security
- Industry standard for password security
- Prevents rainbow table attacks

**Usage Example**:
```typescript
import bcrypt from 'bcrypt';

const saltRounds = 10;
const hashedPassword = await bcrypt.hash(password, saltRounds);
```

### 9. JWT Authentication
```bash
npm install jsonwebtoken cookie-parser
npm install --save-dev @types/jsonwebtoken @types/cookie-parser
```
**Purpose**:
- `jsonwebtoken`: Create and verify JSON Web Tokens
- `cookie-parser`: Parse cookies from HTTP requests

**JWT Benefits**:
- Stateless authentication
- Secure token-based authentication
- Can store user information in token payload

### 10. Cryptographic Operations
```bash
node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
```
**Purpose**: Generate secure random strings for JWT secrets
- `crypto` module comes built-in with Node.js
- Generates 32 random bytes converted to hexadecimal
- Use output as JWT_SECRET in environment variables

## 📁 Recommended Project Structure

```
project-root/
│
├── src/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── utils/
│   └── app.ts
│
├── dist/                 # Compiled JavaScript
├── node_modules/
├── .env                  # Environment variables
├── .gitignore
├── package.json
├── tsconfig.json
└── README.md
```

## 🔧 Essential Scripts for package.json

```json
{
  "scripts": {
    "start": "node dist/app.js",
    "dev": "nodemon src/app.ts",
    "build": "tsc",
    "clean": "rm -rf dist"
  }
}
```

## 🔒 Environment Variables (.env file)

```env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database
MONGODB_URI=mongodb+srv://rashmika:IpK8dEDROwt4Aaar@mini-pos.zayc5ao.mongodb.net/mini-pos

# JWT Configuration
JWT_SECRET=your_generated_secret_here
JWT_EXPIRES_IN=7d

# Other Configurations
BCRYPT_SALT_ROUNDS=10
```

## 🚀 Quick Start Commands

1. **Development Mode**:
   ```bash
   npm run dev
   ```

2. **Build for Production**:
   ```bash
   npm run build
   ```

3. **Start Production Server**:
   ```bash
   npm start
   ```

## 📝 Security Best Practices

1. **Never commit `.env` files** to version control
2. **Use strong JWT secrets** (minimum 32 characters)
3. **Hash passwords** before storing in database
4. **Validate and sanitize** all user inputs
5. **Use HTTPS** in production
6. **Implement rate limiting** to prevent abuse
7. **Keep dependencies updated** regularly

## 🔍 Additional Recommendations

- **Error Handling**: Implement global error handling middleware
- **Logging**: Use libraries like Winston for structured logging
- **Validation**: Use Joi or express-validator for input validation
- **Testing**: Set up Jest for unit and integration testing
- **API Documentation**: Use Swagger/OpenAPI for API documentation

This setup provides a solid foundation for building secure, scalable Node.js applications with TypeScript, MongoDB, and JWT authentication.
